(this.webpackJsonpsjkdm_island=this.webpackJsonpsjkdm_island||[]).push([[0],{107:function(e,t,a){e.exports=a(122)},112:function(e,t,a){},122:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),r=a(10),s=a.n(r),i=(a(112),a(23)),l=a(24),c=a(11),d=a(16),m=a(182),h=a(163),u=a(164),p=a(35),g=a(181),f=a(165),b=a(126),y=a(124),w=a(79),k=a.n(w),v=a(158),E=a(159),x=a(160),j=a(161),I=a(162),T=a(78),S=a.n(T),D=a(77),C=a.n(D),A=a(74),O=a.n(A),N=Object(b.a)({list:{"&:hover":{backgroundColor:"rgba(238,238,238,0.1)"}},link:{color:"white",textDecoration:"none"}}),q=[{name:"Home",url:"/SjukdomCastle",icon:o.a.createElement(O.a,{style:{color:"white"}})},{name:"Projects",url:"/SjukdomCastle/projects",icon:o.a.createElement(C.a,{style:{color:"white"}})},{name:"Contact",url:"/SjukdomCastle/about",icon:o.a.createElement(S.a,{style:{color:"white"}})}],P=function(e){var t=e.handleClick,a=N();return o.a.createElement("div",{onClick:t(!1)},q.map((function(e,t){return o.a.createElement(v.a,{key:t,className:a.list},o.a.createElement(l.b,{to:e.url,className:a.link},o.a.createElement(E.a,{button:!0},o.a.createElement(x.a,null," ",e.icon," "),o.a.createElement(j.a,{primary:e.name}))),o.a.createElement(I.a,null))})))},M=Object(b.a)((function(e){return{root:{marginBottom:"40px",backgroundColor:"#121414"},title:{flexGrow:1,fontFamily:"UnifrakturMaguntia",fontSize:"25px","&:hover":{color:"#4DD779"}},link:{paddingRight:"15px",paddingLeft:"15px",color:"white",textDecoration:"none","&:hover":{color:"#4DD779"}}}})),L=Object(y.a)({root:{backgroundColor:"rgba(238,238,238,0.4)"},paper:{backgroundColor:"#121414",width:"200px"}})(m.a),B=function(e){var t=M(),a=Object(n.useState)(!1),r=Object(d.a)(a,2),s=r[0],i=r[1],c=function(e){return function(t){("keydown"!==t.type||"Shift"!==t.key&&"Tab"!==t.key)&&i(e)}};return o.a.createElement("div",null,o.a.createElement(L,{anchor:"left",open:s,onClose:c(!1)},o.a.createElement(P,{handleClick:c})),o.a.createElement(h.a,{position:"static",className:t.root},o.a.createElement(u.a,null,o.a.createElement(p.a,{className:t.title}," Sjukdom Castle "),o.a.createElement("div",{style:{display:"flex"}},o.a.createElement(g.a,{xsDown:!0},o.a.createElement(l.b,{to:"/SjukdomCastle",className:t.link},o.a.createElement(p.a,null," Home ")),o.a.createElement(l.b,{to:"/SjukdomCastle/projects",className:t.link},o.a.createElement(p.a,null," Projects ")),o.a.createElement(l.b,{to:"/SjukdomCastle/contact",className:t.link},o.a.createElement(p.a,null," Contact "))),o.a.createElement(g.a,{smUp:!0},o.a.createElement(f.a,{onClick:c(!0)},o.a.createElement(k.a,{color:"primary"})))))))},z=a(167),R=a(168),F=a(97),H=a(166),_=a(185),J=a(85),G=a.n(J),U=a(86),V=a.n(U),W=a(80),Q=a.n(W),Z=a(81),$=a.n(Z),K=a(82),Y=a.n(K),X=a(83),ee=a.n(X),te=a(84),ae=a.n(te),ne=Object(b.a)({title:{fontFamily:"Sans Serif",textAlign:"center",color:"white",paddingTop:"20px"},item:{color:"#4DD779",fontFamily:"Space Mono, mono space"},paper:{height:"380px",borderRadius:"10px",backgroundColor:"#121414",marbackgroundColor:"#121414",ginTop:"20px",marginTop:"30px"}}),oe=function(e){var t=e.skills,a=ne(),n=[Q.a,ae.a,ee.a,Y.a,$.a];return o.a.createElement(F.a,{elevation:4,className:a.paper},o.a.createElement(p.a,{variant:"h4",className:a.title}," ",t.title," "),o.a.createElement(v.a,null,t.content.map((function(e,t){return o.a.createElement(E.a,{key:t},e.img?o.a.createElement(H.a,null,o.a.createElement(_.a,null,o.a.createElement("img",{src:n[t],width:"50px",height:"50px",alt:""}))):"",o.a.createElement(j.a,{primary:o.a.createElement(p.a,{className:a.item}," ",e.skill," "),disableTypography:!0}),e.level?[1,2,3,4,5].map((function(t,a){return t<=e.level?o.a.createElement(G.a,{key:a,style:{color:"#4DD779"}}):o.a.createElement(V.a,{key:a,style:{color:"#4DD779"}})})):"")}))))},re=a(87),se=a(88),ie=a(89),le=a.n(ie),ce=function(e){return o.a.createElement("div",null,o.a.createElement("img",{src:le.a,width:150,height:150,alt:""}))},de=Object(b.a)({body:{backgroundColor:"#121414",borderRadius:"10px",paddingTop:"20px"},title:{fontFamily:"Libre Baskerville, serif",fontSize:"50px",color:"white",textAlign:"center",marginBottom:"30px"},subtitle:{fontFamily:"Libre Baskerville, serif",fontSize:"20px",color:"white",textAlign:"center",marginBottom:"50px"},description:{fontFamily:"Libre Baskerville, serif",fontSize:"18px",color:"white",textAlign:"center",marginTop:"50px",marginBottom:"50px"}}),me=function(e){var t=de();return o.a.createElement(z.a,null,o.a.createElement(R.a,{container:!0,justify:"center",alignItems:"center",direction:"column",spacing:4,className:t.body},o.a.createElement(R.a,{item:!0},o.a.createElement(p.a,{variant:"h1",className:t.title},"Welcome to my castle")),o.a.createElement(R.a,{item:!0},o.a.createElement(p.a,{variant:"h5",className:t.subtitle},"The beginning of a long journey has just started!")),o.a.createElement(R.a,{item:!0},o.a.createElement(ce,null)),o.a.createElement(R.a,{item:!0},o.a.createElement(p.a,{variant:"body2",className:t.description},"Hello! My name's Daniel, I'm a 25 years old software developer from Mexico interested in learning ",o.a.createElement("br",null),"and understanding technologies mainly related to backend and machine learning and a little of front end but also curious about other areas like hardware with arduino and rapsberry pi, networks and IOT. ",o.a.createElement("br",null),o.a.createElement("br",null),"I've had success in the 2 years I've been programming because I like to research and study by myself, I'm an autodidact that likes to learn new things everyday in order to expand my knowledge in a fast way. ",o.a.createElement("br",null),o.a.createElement("br",null),"The main programming languages I use is python for tasks in backend, machine learning and data analysis, javascript for front end task and also use sql/no sql databases being postgresql and mongodb the main ones. ",o.a.createElement("br",null)))),o.a.createElement(R.a,{container:!0,spacing:3},o.a.createElement(R.a,{item:!0,lg:6,md:6,xs:12},o.a.createElement(oe,{skills:se})),o.a.createElement(R.a,{item:!0,lg:6,md:6,xs:12},o.a.createElement(oe,{skills:re}))))},he=a(169),ue=a(170),pe=a(171),ge=a(172),fe=a(173),be=Object(b.a)((function(e){return{card:{height:"380px",borderRadius:"30px",boxShadow:"-30px 20px 20px rgba(0, 0, 0, 0.3)",border:"1px solid #4DD779",backgroundColor:"#121414",display:"flex",flexDirection:"column",justifyContent:"space-between"},cardHeader:{fontFamily:"Space Mono, mono space",textAlign:"center",backgroundColor:"#222222",color:"white"},cardBody:{color:"white",fontFamily:"Space Mono, mono space",textAlign:"justify"}}})),ye=function(e){var t=e.id,a=e.title,n=e.description,r=e.urls,s=e.tags,i=be(),d=Object(c.f)();return o.a.createElement(he.a,{className:i.card},o.a.createElement(ue.a,{disableTypography:!0,title:o.a.createElement(p.a,{style:{fontFamily:"Space Mono, mono space"}}," ",a," "),className:i.cardHeader}),o.a.createElement(pe.a,null,o.a.createElement("p",{style:{color:"#4DD779",fontFamily:"Space Mono, mono space"}}," sjukdom@castle $ ./project.sh   "),o.a.createElement(p.a,{variant:"body2",className:i.cardBody},n,"Tags:",s.map((function(e,t){return t===s.length-1?e:e+", "})))),o.a.createElement(ge.a,{style:{display:"flex",justifyContent:"center"}},o.a.createElement(l.b,{to:"".concat(d.path,"/").concat(t)},o.a.createElement(fe.a,{size:"small",variant:"contained",color:"primary"}," View ")),o.a.createElement(fe.a,{size:"small",variant:"contained",color:"primary",href:r[0],target:"_blank"}," Github "),r[1]?o.a.createElement(fe.a,{size:"small",variant:"contained",color:"primary",href:r[1],target:"_blank"}," Heroku "):""))},we=a(61),ke=a(178),ve=function(e){var t=Object(n.useState)([]),a=Object(d.a)(t,2),r=a[0],s=a[1];return Object(n.useEffect)((function(){s(we)}),[]),o.a.createElement("div",null,o.a.createElement(R.a,{container:!0,spacing:4},r.map((function(e){return o.a.createElement(R.a,{item:!0,lg:4,md:6,sm:12,key:e.id},o.a.createElement(ke.a,null,o.a.createElement(ye,{id:e.id,title:e.title,description:e.description,urls:e.urls,tags:e.tags})))}))))},Ee=a(90),xe=a.n(Ee),je=a(95),Ie=a(177),Te=a(175),Se=a(183),De=a(179),Ce=a(94),Ae=a.n(Ce),Oe=a(92),Ne=a.n(Oe),qe=a(93),Pe=a.n(qe),Me=a(91),Le=a.n(Me),Be=Object(b.a)({text:{width:"-moz-available",marginBottom:"20px",color:"white"},button:{backgroundColor:"#4DD779"},form:{backgroundColor:"#121414",margin:"20px 20px",padding:"20px 20px",borderRadius:"10px"},icon:{color:"#4DD779","&:hover":{color:"red"}}}),ze=Object(y.a)({root:{"& label.Mui-focused":{color:"#4DD779"},"& .MuiInput-underline:after":{borderBottomColor:"#4DD779"},"& .MuiOutlinedInput-root":{"& fieldset":{borderColor:"#4DD779"},"&:hover fieldset":{borderColor:"#4DD779"},color:"white","& .MuiOutlinedInput-notchedOutline":{borderColor:"#4DD779"},"& .MuiInputLabel-outlined":{color:"white"}},color:"white","& .MuiFormLabel-root":{color:"white"},"& .MuiInputBase-root":{}}})(Ie.a),Re=function(e){var t=Be(),a=Object(je.a)(),r=a.handleSubmit,s=a.register,i=a.errors,l=Object(n.useState)(!1),c=Object(d.a)(l,2),m=c[0],h=c[1],u=function(){h(!1)};return o.a.createElement(R.a,{container:!0,justify:"center",alignItems:"center",alignContent:"center",direction:"column",spacing:5},o.a.createElement(R.a,{item:!0,lg:12,md:12,xs:12},o.a.createElement("img",{src:Le.a,width:150,height:150,alt:""})),o.a.createElement(R.a,{item:!0,lg:12,md:12,xs:12,style:{height:"600px",width:"800px"}},o.a.createElement("form",{onSubmit:r((function(e){xe.a.send("gmail","template_2c8k2cv",{subject:e.subject,email:e.email,message:e.message},"user_8dpnAh6jdqHYTcRzH2dOa").then((function(e){h(!0)}),(function(e){alert("There was an error in the EmailJS server"),console.log(e)}))})),className:t.form},o.a.createElement(ze,{name:"email",label:"Email",variant:"outlined",error:!!i.email,InputLabelProps:{},className:t.text,InputProps:{startAdornment:o.a.createElement(Te.a,{position:"start"},o.a.createElement(Ne.a,{className:t.icon}))},inputRef:s({required:!0,pattern:/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i}),autoComplete:"false",helperText:i.email?i.email.required?"This field is required":"Invalid email":""}),o.a.createElement("br",null),o.a.createElement(ze,{name:"subject",label:"Subject",variant:"outlined",error:!!i.subject,InputLabelProps:{},className:t.text,InputProps:{startAdornment:o.a.createElement(Te.a,{position:"start"},o.a.createElement(Pe.a,{className:t.icon}))},inputRef:s({required:!0}),autoComplete:"false",helperText:i.subject?"This field is required":""}),o.a.createElement("br",null),o.a.createElement(ze,{name:"message",label:"Message",variant:"outlined",error:!!i.message,InputLabelProps:{shrink:!0},className:t.text,multiline:!0,rows:10,inputRef:s({required:!0}),autoComplete:"false",helperText:i.message?"This field is required":""}),o.a.createElement("br",null),o.a.createElement(fe.a,{variant:"contained",className:t.button,type:"submit"},o.a.createElement(p.a,{style:{color:"white"}}," Send  "),o.a.createElement(Ae.a,null)))),o.a.createElement(Se.a,{open:m,autoHideDuration:5e3,onClose:u},o.a.createElement(De.a,{onClose:u,severity:"success"}," Thank you for the message ")))},Fe=a(62),He=a.n(Fe),_e=Object(b.a)({root:{backgroundColor:"#121414",marginTop:"50px"},content:{textAlign:"center",color:"white",marginTop:"30px"},githubicon:{color:"white",width:"40px",height:"40px",marginTop:"10px"},text:{color:"white",fontSize:"15px",textDecoration:"none"}}),Je=function(e){var t=_e();return o.a.createElement("div",{className:t.root},o.a.createElement(R.a,{container:!0},o.a.createElement(R.a,{item:!0,lg:6,md:6,xs:6},o.a.createElement(p.a,{className:t.content}," You can find me at "),o.a.createElement(f.a,{href:"https://github.com/daniel-sjkdm",target:"_blank",rel:"noopener noreferrer",style:{display:"block"}},o.a.createElement(He.a,{className:t.githubicon})),o.a.createElement("p",{style:{color:"white",textAlign:"center",fontSize:"13px"}}," github.com/daniel-sjkdm ")),o.a.createElement(R.a,{item:!0,lg:6,md:6,xs:6},o.a.createElement(p.a,{className:t.content}," This site was built with "),o.a.createElement(v.a,null,o.a.createElement(E.a,null,o.a.createElement(j.a,{disableTypography:!0,primary:o.a.createElement("a",{className:t.text,href:"https://reactjs.org/",rel:"noopener noreferrer",target:"_blank"}," React.js "),style:{textAlign:"center"}})),o.a.createElement(E.a,null,o.a.createElement(j.a,{disableTypography:!0,primary:o.a.createElement("a",{className:t.text,href:"https://material-ui.com/",target:"_blank",rel:"noopener noreferrer"}," Material-UI "),style:{textAlign:"center"}})),o.a.createElement(E.a,null,o.a.createElement(j.a,{disableTypography:!0,primary:o.a.createElement("a",{className:t.text,href:"https://www.emailjs.com/",target:"_blank",rel:"noopener noreferrer"}," EmailJS "),style:{textAlign:"center"}})))),o.a.createElement(R.a,{item:!0,lg:12,md:12,xs:12},o.a.createElement(p.a,{className:t.content},"Icons made by",o.a.createElement("a",{href:"https://www.flaticon.com/authors/freepik",target:"_blank",rel:"noopener noreferrer",title:"Freepik",style:{color:"#4DD779"}}," Freepik ")," from ",o.a.createElement("a",{href:"https://www.flaticon.com/",target:"_blank",rel:"noopener noreferrer",style:{color:"#4DD779"},title:"Flaticon"}," www.flaticon.com")))))},Ge=Object(b.a)((function(e){return{card:{height:"800px",borderRadius:"30px",boxShadow:"-30px 20px 20px rgba(0, 0, 0, 0.3)",border:"1px solid #4DD779",backgroundColor:"#121414",display:"flex",flexDirection:"column",justifyContent:"space-between"},cardHeader:{fontFamily:"Space Mono, mono space",textAlign:"center",backgroundColor:"#222222",color:"white"},cardBody:{color:"white",fontFamily:"Space Mono, mono space",textAlign:"justify",marginTop:"20px"}}})),Ue=function(){var e=Ge(),t=Object(n.useState)({}),a=Object(d.a)(t,2),r=a[0],s=a[1],i=Object(c.f)();return Object(n.useEffect)((function(){!function(){var e=we.filter((function(e){return e.id===parseInt(i.params.id,10)}));s(e[0])}()}),[]),o.a.createElement("div",null,o.a.createElement(he.a,{className:e.card},o.a.createElement(ue.a,{disableTypography:!0,title:o.a.createElement(p.a,{style:{fontFamily:"Space Mono, mono space"}}," ",r.title," "),className:e.cardHeader}),o.a.createElement(pe.a,{style:{overflowY:"scroll"}},o.a.createElement("p",{style:{color:"#4DD779",fontFamily:"Space Mono, mono space"}}," sjukdom@castle $ ./project.sh   "),o.a.createElement(p.a,{variant:"body2",className:e.cardBody},"Description: ",r.description),r.long_description?r.long_description.split("\n").map((function(t){return o.a.createElement(p.a,{variant:"body2",className:e.cardBody},t)})):"",o.a.createElement(p.a,{variant:"body2",className:e.cardBody},"Tags:",o.a.createElement("br",null),o.a.createElement("br",null),r.tags?r.tags.map((function(e,t){return t===r.tags.length-1?e:e+", "})):""),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement(p.a,{variant:"body2",className:e.cardBody,style:{display:"flex",justifyContent:"center",alignContent:"center",flexDirection:"column",alignItems:"center",margin:"30px 30px"}},"Github:",o.a.createElement(fe.a,{href:r.url,target:"_blank"},o.a.createElement(He.a,{style:{color:"white"}}))))))},Ve=a(176),We=Object(b.a)({app:{backgroundColor:"#2E3440"}});var Qe=function(){var e,t=We();return o.a.createElement("div",{className:t.app},o.a.createElement(Ve.a,null),o.a.createElement(l.a,null,o.a.createElement(B,null),o.a.createElement(z.a,null,o.a.createElement(c.c,null,o.a.createElement(c.a,(e={exact:!0,path:"/SjukdomCastle"},Object(i.a)(e,"exact",!0),Object(i.a)(e,"component",me),e)),o.a.createElement(c.a,{exact:!0,path:"/SjukdomCastle/projects",component:ve}),o.a.createElement(c.a,{exact:!0,path:"/SjukdomCastle/projects/:id",component:Ue}),o.a.createElement(c.a,{exact:!0,path:"/SjukdomCastle/contact",component:Re}))),o.a.createElement(Je,null)))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(o.a.createElement(Qe,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))},61:function(e){e.exports=JSON.parse('[{"id":1,"title":"Vaishabot","description":"A telegram bot made with python that tells you the important events in Vaishnavism such as Ekadasi and the Iskcon celebrations.","long_description":"This project was made as a way to remember the Vaishnavism events without writing them down in paper or asking people about it. Instead it\'s better to automate the process by storing the celebrations in a database (I use postgresql deployed at Heroku) and then make queries to fecth them by year, month or both fields.\\nThe bot is coded with python-telegram-bot module which is a wrapper for the telegram API. In order to use the functions provided by the library I asked the Botfather to create a bot and then generate API keys to start using it as a developer.\\nTelegram is limited to send messages with not too much charactes, that\'s why instead of spliting the text and sending it in multiple messages I chose to use jinja2 to render the data in an HTML document and then convert it to PDF. The pipeline looks like this:\\n1. User send a command to the bot, asking for dates: \\\\ekadasi 10.\\n2. The bot parse the argument as a month and then makes a SELECT query to get the row from the database.\\n3. The dictionary is sent to a jinja template (HTML) and is placed in the corresping placeholders.\\n4 The template has css styles to \'beautify\' the html document.\\n5. Once the template is generated, pdftoolkit library is used to turn the HTML document into a pdf file.\\n6. The file is finally sent to the telegram chat where the command was called.\\nChallenges:\\n* In the beginning, the bot worked only locally, I had to run the program in my computer to have it working but this isn\'t efficient so I started learning how to deploy it for free and I found Heroku.\\n* Heroku has free plans (with limits) but since this is from now a small app I didn\'t had to pay for fast servers, the basic one is working as expected though it sleeps if isn\'t used.\\n* The character limit per telegram message led me to learn how to convert html to pdf format.\\n* Web scrapping was used in here to fetch the events from a webpage and then upload the content to the postgresql database that\'s also hosted at Heroku for free.","tags":["python","telegram","heroku","bot","backend","web scrapping"],"urls":["https://github.com/daniel-sjkdm/VaishnavismNotifyTBot"]},{"id":2,"title":"Vaishnavism Scrapper","description":"Web scrapping applied to a page about Vaishnavism to get data for the ekadasi and iskcon events, storing them in a postgresql database at heroku.","long_description":"--- Introduction:\\nWeb scrapping is a way to get unstructured and raw data from web pages by making GET and POST requests to the url of interest. This is ususually done when there ins\'t an API to interact with. The content is in html format and must be parsed using selectors such as:\\n* css\\n* css path\\n* xpath\\nHow can we find this information?\\nUsing the developer tools of a browser, all the html elements rendered can be inspected and the selectors can be copied to get content like: tables, paragraphs, images, etc.\\nIn python there are libraries to scrape websites:\\n* Beautiful Soup\\n* Selenium (testing)\\n* Scrapy\\nIn this project I use scrapy because it has the advantage of defining:\\n* Spiders: a class where you declare how to parse a site or list of sites with selectors and then how they must be structured in a data structure class that resides in a file called items.py\\n* Items: it\'s a class file where you define how the data is turned into an object that can be saved later into a json or csv file or even be stored into a database. It\'s like a model in the ORM paradigm where the class name is a table and the attributes represents the columns.\\n* Pipelines: a class where you define how the parsed data is stored in a sql or no sql database. Here you use the drivers of the database of interest and make the corresponding queries to uplodad the data.\\n--- The project:\\nSince I wanted to make a telegram bot for the Vaishnavism events, this scraper was created to fetch the events from the page https://www.drikpanchang.com/, it doesn\'t have an API so I had to manually parse the data inside a table to gather information of:\\n* Names\\n* Dates (unformatted) and then use libraries like datetime to turn them into a string of the type \'%Y-%m-%d %H:%M:%S\' to stored them properly at the database because the schema needed a valid DATETIME string.\\nIt was a funny thing to do because I could see how the raw data was step by step turned into useful information that I needed for the telegram bot to work.\\n--- Challenges:\\n* Undertand how to parse html with css and xpath selectors.\\n* Know how scrapy works from scratch, it\'s more difficult and complex than beautiful soup but has more features as mentioned above.\\n* Turn data strings like \'January 10, 2020\' into a valid format to be uploaded to the database.\\n* Learn to connect to postgresql using the psycopg2 library providing the authentication credentials.\\n* Learn how to deploy a postgresql database to Heroku.","tags":["python","scrapy","web scrapping","postgresql","heroku"],"urls":["https://github.com/daniel-sjkdm/VaishnavismScrapper"]},{"id":3,"title":"Panda Covid","description":"Data analysis for a worlwide coronavirus dataset made with pandas at Google Colab notebooks.","long_description":"--- Introduction:\\nPandas is a data manipulation tool that\'s used for statistical analysis and visualization with matplotlib and other plotting libraries such as plotly, seaborn, etc. The main data structure is a DataFrame that\'s very similar to a table in SQL world since it can store multi type data and you can query the object using:\\n* Conditionals: and, or\\n* Group by: and then reduce the groups with sum, count, max, min, etc...\\n* Operators: mathematical ones like <, >, =, etc...\\nThere are also built in statistical functions to get mean, variance, correlations between variables/columns, moments, differences, among others that are easy visualized in box plots, pie charts, histograms and more!\\nAlso, the DataFrame can be created with existing data structures like dictionaries, numpy arrays, lists and csv files.\\n--- The project: I wanted to undertand how to use pandas and a the plotting library seaborn that\'s built in top of matplotlib so I decided to download a coronavirus dataset from Kaggle that has a set of files in csv format that can be loaded with a pandas with no problem. I chose Coronavirus as topic because I wanted to know and understand how the statisctics about new cases, deaths, recovered people and active cases were going in the world, so I needed to use group by operations, I did it in fields like:\\n* Country\\n* Regions\\n* Continent\\n* Date (day)\\nThis way I could answer questions like:\\n* Which is the country/contintent with most infected people?\\n* What was the day where most people recovered?\\n* What was the month with less infected people?\\nPandas really makes it easy to solve this kind of problems and with seaborn I could see in histograms how the frequency of some values are repeated since this is a type of statistical distribution that can be aproximated with existing functions like gaussians, binomial, etc. Also I could see whether or not numeric variables (infected, active cases, deaths, recoverd, new cases) are correlated between each other.\\n--- Challenges:\\n* Understand how to manipulate the DataFrame structure to get the information I wanted, filtering the content and grouping it.\\n* Reduce a set of rows into a single value that represents a statistical value like the mean, the maximum, the minimun, the sum, etc.\\n* Learn how to use seaborn with frames wich turned out to be easy and funny!\\n* Realize that pandas is like SQL for data analysis on steroids!\\n* Discover new libraries similar to pandas that outperform it (like dask for bigger datasets).","tags":["python","pandas","seaborn","statistics","jupyter"],"urls":["https://github.com/daniel-sjkdm/PandaCovid"]},{"id":4,"title":"Consuming APIs","description":"Consuming an API is a way of many to gather data from different sources, here I use python to fetch data from: reddit, spotify and countriesAPI.","long_description":"--- Introduction\\nThe APIs are around the web making data available for the developers to use it in other apps or extract useful information that can be used for different purposes. There are two kinds of APIs that are commonly used: rest and graphql. The first one is used by many websites and that\'s why I decided to search for restful APIs to consume with python since the default encoding format of the data is JSON.\\nThe APIs are designed to have endpoints where you can make http the following http requests:\\n* GET: send content in the url\\n* POST: send sensitive data like passwords, credentials, credit cards, etc.\\n* PUT: update existing content\\n* DELETE: erase content\\n* And more!\\n--- The project:\\nTwo of the APIs (reddit and spotify) needed authorization tokens, the reddit one is a permanent one while the spotify is a json web token (JWT) that has expiration data and it needs to be refreshed before it\'s no longer valid, so I registered an account in the developer website of each page to get the credentials which in are:\\n* Client id\\n* Client secret\\nOnce I had the credentials I used the requests library for the spotify API and PRAW (a module) to make the GET requets and fetch data like posts, songs, artists, albums, etc.\\nThe country API is opened so there\'s no need to register an account.\\n--- Challenges:\\n* Understand how an API works, how the server and the client are related in the process of making a call.\\n* Understand what headers are in a http request, how the format of the data and authorization credentials are included in them and if not set properly it doesn\'t work as expected.\\n* Learn what a JWT token is, how it\'s commonly used in newer applications because it\'s more secure and that it has an expiration date.\\n* Limits, some APIs only gives you a limited ammount of http calls.","tags":["python","api","backend"],"urls":["https://github.com/daniel-sjkdm/ConsumingAPIs"]},{"id":5,"title":"Gapy","description1":"Modeling a store database with postgresql as RDBMS and implementing advanced features such as stored procedures, triggers, views and backups","description":"Connecting to the Google Drive API with python to make backups from the terminal with watchdog to sync with a local filesystem.","long_description":"--- Introduction:\\nGoogle has a developer console where you must register in order to be able to use the API of their services such as Drive, Sheets, Calendar, etc. If you want to include their services in an external application that have access to sensitive data it needs to be verified, since I only wanted to use the Google Drive API locally for myself I didn\'t had to register it.\\nWith this API I can have access to the data I store at Drive and perform actions to:\\n* Upload content\\n* Delete content\\n* Upgrade content\\nWith this in mind, I wanted to make a tool to make backups of the files in my computer and even \'mirror\' them. How? There\'s a python library called \'watchdog\' that can observe a filesystem for the events: create, delete, update and perform the actions you want.\\n--- The project:\\nI wanted to syncronize the local filesystem to Drive, so I use watchdog and the click module (command line parser) to give it as input a directory to be observed and if any change is detected, mirror it in the cloud! So I created an connection class called gapy that can perform the needed actions to syncronize the files.\\n--- Challenges:\\n* Understand how to register to the Google Developer Console and how to create an app.\\n* Select the set of permissions my app needed since there are many different ones, where some allows you to have access to sensitive data and to perform risky actions like deleting content.\\n* Understand how the watchdog module works and how it\'s really powerful to perform actions in the firing of events inside a target filesystem.","tags":["postgresql","flask","python"],"urls":["https://github.com/daniel-sjkdm/Copyd19"]},{"id":6,"title":"Store database","description":"Modeling a store database with postgresql as RDBMS and implementing advanced features such as stored procedures, triggers and views.","long_description":"---Introduction:\\nPostgresql is one of the most amazing Relational Database Management System (RDBMS): it has a set of commands that are easy to learn and understand, it has a GUI program to interact with (pgamdin 4), the SQL dialect it uses is more intuitive than other ones (in my opinion) and you can integrate it with python in a easy way (with psycopg2).\\nAlso, I started to use it when I was leaning Django with the built in Object Relation Mapping it has because I was using MySQL before.\\nIn the databases world the ones of my choice are Postgresql for SQL and MongoDB for nosql, altough I want to learn how to use another ones.\\nCreating a database is a fun process since you have to define the schema and have in mind that there are normal forms that makes your database more efficient in terms of avoiding replicated data in many tables and being faster for making queries, desining is an arti that needs to be mastered.\\nBut creating the database and the tables isn\'t everything, there are also other features like:\\n* Stores procedures: to commit or cancel transactions given some conditions.\\n* Triggers: to validate data before/after some events are \'triggered\' (inserting, updating, deleting).\\n* Functions: that return a value(s) and are shortcuts that can be called instead of writing a complex query more than once.\\n* Views: that restrict users to have access to only a subset of the whole data.\\n* Backups: that can be performed periodically.\\nExporting/importing data: in file formats like json or csv.\\n--- The project:\\nI decided to model a database for a store, this store needs to state relations between:\\n* store itself\\n* inventories\\n* items for sale (and how many of them are in existence)\\n* customers\\n* shopping cart of the customers\\n* payment methods","tags":["postgresql","python"],"urls":["https://github.com/daniel-sjkdm/StoreDatabase"]},{"id":7,"title":"Django NLTK","description":"A web application that uses django as backend and nltk to parse user input with jquery as frontend.","long_description":"--- Introduction: Django is a known backend framework that allows the developers to make web servers in an easy way, it has all the tools that are needed to create one based on the paradigm MVT (Model View Template), where:\\n* Model: the database schema is defined here as a class (table) with attributes that maps to columns, each instance is basically a row in the database. This kind of paradigm is called ORM (Object Relational Mapping) and migrations are performed to general real SQL code for the database of your choice.\\n* View: a file where all the logic for hanlding client\'s requests are performed and responses are returned back with html data or json (for APIs).\\n* Template: augmented html files where logic can be used to handle data sent by the server as context from the view file. Templates can be inherited in order to avoid repeating code and makes rendering content easy.\\nOne of the disadvantages of writing pure code only in django and html is that dynamic content are rendered after reloading the page but javascript and its variery of front end frameworks can tackle this by making XMLHttpRequest, avoiding to reload the page everytime. Some of the popular front end frameworks that can be integrated with django are:\\n* Jquery\\n* React\\n* Vue\\nAlso, django provides libraries to handle user authentication, creation, etc and all of the data can be managed via the admin interface, a really powerful feature that other python\'s frameworks lacks.\\n--- The project:\\nFor this project I created an API with the django rest framework tool to define all the needed logic to handle GET and POST requests sent by the client, having in mind that:\\n1. The client sends data from html input elements, text content that is sent to the server as encoded JSON format via AJAX to be parsed.\\n2. The server receives the content, call the NLTK defined functions to perform Natural Language Processing tasks:\\n* Tokenize\\n* Generate stems\\n* Generate Part Of Speech tags (POS)\\n* Compute the sentiment of the sentence as a integer number (-1, 0 and 1) for negative, neutral and positive.\\n3. Once the functions returns the parsed data, it\'s sent back to the client as JSON.\\n4. The AJAX call receives a response to the requests with the parsed data.\\n5. Javascript is used to manipulate the Documment Object Model (DOM) of the web browsed and are rendered as elements of a table.\\nThat\'s why I decided to use JQuery for the front end since it eases the making of http requests to the server and also makes easy to manipulate the DOM selecting html items by id, class or name, all of this done without refreshing the page.\\n--- Challenges:\\n* Understand how to send data from the client to the server and vice versa (http requests).\\n* Encode the data properly in order to be sent back and forth (JSON)\\n* Use JQuery to dinamically render the server response data to the user interface\\n* Learn the basics about html and css (flexbox is really useful)\\nLearn javascript higher order functions (map, to go from an array of data to html code).\\n* Parse the raw natural language to extract useful information as the tokens, tags, etc.\\n* Learn how to make a REST API (django rest framework)\\n* Deploy the webpage to a Heroku server (PaaS) for free.","tags":["python","nlp","django","rest api","jquery","postgresql"],"urls":["https://github.com/daniel-sjkdm/djangonltk","https://djangonltk.herokuapp.com"]}]')},80:function(e,t,a){e.exports=a.p+"static/media/brain.1a503fc3.svg"},81:function(e,t,a){e.exports=a.p+"static/media/computer.41351471.svg"},82:function(e,t,a){e.exports=a.p+"static/media/database.ef7dec09.svg"},83:function(e,t,a){e.exports=a.p+"static/media/ux.454618b0.svg"},84:function(e,t,a){e.exports=a.p+"static/media/server.c186eb93.svg"},87:function(e){e.exports=JSON.parse('{"title":"Technical Skills","content":[{"skill":"Python","level":4},{"skill":"Postgresql","level":4},{"skill":"Linux","level":4},{"skill":"Javascript","level":3},{"skill":"React.js","level":3},{"skill":"JQuery","level":3}]}')},88:function(e){e.exports=JSON.parse('{"title":"Interests","content":[{"skill":"Artificial Intelligence","img":"../assets/img/brain.svg"},{"skill":"Backend","img":"../assets/img/server.svg"},{"skill":"Frontend","img":"../assets/img/ux.svg"},{"skill":"Databases","img":"../assets/img/database.svg"},{"skill":"GNU/Linux","img":"../assets/img/computer.svg"}]}')},89:function(e,t,a){e.exports=a.p+"static/media/cultures.66151fee.svg"},91:function(e,t,a){e.exports=a.p+"static/media/people.d9c36406.svg"}},[[107,1,2]]]);
//# sourceMappingURL=main.7ef5f9ac.chunk.js.map